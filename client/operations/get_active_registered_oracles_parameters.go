// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetActiveRegisteredOraclesParams creates a new GetActiveRegisteredOraclesParams object
// with the default values initialized.
func NewGetActiveRegisteredOraclesParams() *GetActiveRegisteredOraclesParams {
	var ()
	return &GetActiveRegisteredOraclesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetActiveRegisteredOraclesParamsWithTimeout creates a new GetActiveRegisteredOraclesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetActiveRegisteredOraclesParamsWithTimeout(timeout time.Duration) *GetActiveRegisteredOraclesParams {
	var ()
	return &GetActiveRegisteredOraclesParams{

		timeout: timeout,
	}
}

// NewGetActiveRegisteredOraclesParamsWithContext creates a new GetActiveRegisteredOraclesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetActiveRegisteredOraclesParamsWithContext(ctx context.Context) *GetActiveRegisteredOraclesParams {
	var ()
	return &GetActiveRegisteredOraclesParams{

		Context: ctx,
	}
}

// NewGetActiveRegisteredOraclesParamsWithHTTPClient creates a new GetActiveRegisteredOraclesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetActiveRegisteredOraclesParamsWithHTTPClient(client *http.Client) *GetActiveRegisteredOraclesParams {
	var ()
	return &GetActiveRegisteredOraclesParams{
		HTTPClient: client,
	}
}

/*GetActiveRegisteredOraclesParams contains all the parameters to send to the API endpoint
for the get active registered oracles operation typically these are written to a http.Request
*/
type GetActiveRegisteredOraclesParams struct {

	/*From
	  Last oracle in previous page

	*/
	From *string
	/*Max
	  Max number of active oracles received

	*/
	Max *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get active registered oracles params
func (o *GetActiveRegisteredOraclesParams) WithTimeout(timeout time.Duration) *GetActiveRegisteredOraclesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get active registered oracles params
func (o *GetActiveRegisteredOraclesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get active registered oracles params
func (o *GetActiveRegisteredOraclesParams) WithContext(ctx context.Context) *GetActiveRegisteredOraclesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get active registered oracles params
func (o *GetActiveRegisteredOraclesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get active registered oracles params
func (o *GetActiveRegisteredOraclesParams) WithHTTPClient(client *http.Client) *GetActiveRegisteredOraclesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get active registered oracles params
func (o *GetActiveRegisteredOraclesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the get active registered oracles params
func (o *GetActiveRegisteredOraclesParams) WithFrom(from *string) *GetActiveRegisteredOraclesParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get active registered oracles params
func (o *GetActiveRegisteredOraclesParams) SetFrom(from *string) {
	o.From = from
}

// WithMax adds the max to the get active registered oracles params
func (o *GetActiveRegisteredOraclesParams) WithMax(max *int64) *GetActiveRegisteredOraclesParams {
	o.SetMax(max)
	return o
}

// SetMax adds the max to the get active registered oracles params
func (o *GetActiveRegisteredOraclesParams) SetMax(max *int64) {
	o.Max = max
}

// WriteToRequest writes these params to a swagger request
func (o *GetActiveRegisteredOraclesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom string
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Max != nil {

		// query param max
		var qrMax int64
		if o.Max != nil {
			qrMax = *o.Max
		}
		qMax := swag.FormatInt64(qrMax)
		if qMax != "" {
			if err := r.SetQueryParam("max", qMax); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
