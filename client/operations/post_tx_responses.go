// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/aeternity/aepp-sdk-go/models"
)

// PostTxReader is a Reader for the PostTx structure.
type PostTxReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTxReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostTxOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostTxBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostTxOK creates a PostTxOK with default headers values
func NewPostTxOK() *PostTxOK {
	return &PostTxOK{}
}

/*PostTxOK handles this case with default header values.

Successful operation
*/
type PostTxOK struct {
	Payload *models.PostTxResponse
}

func (o *PostTxOK) Error() string {
	return fmt.Sprintf("[POST /tx][%d] postTxOK  %+v", 200, o.Payload)
}

func (o *PostTxOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostTxResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTxBadRequest creates a PostTxBadRequest with default headers values
func NewPostTxBadRequest() *PostTxBadRequest {
	return &PostTxBadRequest{}
}

/*PostTxBadRequest handles this case with default header values.

Invalid transaction
*/
type PostTxBadRequest struct {
	Payload *models.Error
}

func (o *PostTxBadRequest) Error() string {
	return fmt.Sprintf("[POST /tx][%d] postTxBadRequest  %+v", 400, o.Payload)
}

func (o *PostTxBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
