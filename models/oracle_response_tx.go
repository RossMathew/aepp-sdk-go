// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OracleResponseTx oracle response tx
// swagger:model OracleResponseTx
type OracleResponseTx struct {

	// fee
	// Required: true
	Fee *int64 `json:"fee"`

	// Oracle nonce
	Nonce int64 `json:"nonce,omitempty"`

	// oracle
	Oracle EncodedHash `json:"oracle,omitempty"`

	// query id
	// Required: true
	QueryID EncodedHash `json:"query_id"`

	// response
	// Required: true
	Response *string `json:"response"`

	// ttl
	TTL int64 `json:"ttl,omitempty"`
}

// Validate validates this oracle response tx
func (m *OracleResponseTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleResponseTx) validateFee(formats strfmt.Registry) error {

	if err := validate.Required("fee", "body", m.Fee); err != nil {
		return err
	}

	return nil
}

func (m *OracleResponseTx) validateOracle(formats strfmt.Registry) error {

	if swag.IsZero(m.Oracle) { // not required
		return nil
	}

	if err := m.Oracle.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("oracle")
		}
		return err
	}

	return nil
}

func (m *OracleResponseTx) validateQueryID(formats strfmt.Registry) error {

	if err := m.QueryID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("query_id")
		}
		return err
	}

	return nil
}

func (m *OracleResponseTx) validateResponse(formats strfmt.Registry) error {

	if err := validate.Required("response", "body", m.Response); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleResponseTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleResponseTx) UnmarshalBinary(b []byte) error {
	var res OracleResponseTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
