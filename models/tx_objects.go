// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// TxObjects tx objects
// swagger:discriminator TxObjects data_schema
type TxObjects interface {
	runtime.Validatable

	// data schema
	// Required: true
	DataSchema() string
	SetDataSchema(string)
}

type txObjects struct {
	dataSchemaField string
}

// DataSchema gets the data schema of this polymorphic type
func (m *txObjects) DataSchema() string {
	return "TxObjects"
}

// SetDataSchema sets the data schema of this polymorphic type
func (m *txObjects) SetDataSchema(val string) {

}

// UnmarshalTxObjectsSlice unmarshals polymorphic slices of TxObjects
func UnmarshalTxObjectsSlice(reader io.Reader, consumer runtime.Consumer) ([]TxObjects, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []TxObjects
	for _, element := range elements {
		obj, err := unmarshalTxObjects(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalTxObjects unmarshals polymorphic TxObjects
func UnmarshalTxObjects(reader io.Reader, consumer runtime.Consumer) (TxObjects, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalTxObjects(data, consumer)
}

func unmarshalTxObjects(data []byte, consumer runtime.Consumer) (TxObjects, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the data_schema property.
	var getType struct {
		DataSchema string `json:"data_schema"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("data_schema", "body", getType.DataSchema); err != nil {
		return nil, err
	}

	// The value of data_schema is used to determine which type to create and unmarshal the data into
	switch getType.DataSchema {
	case "JSONTxs":
		var result JSONTxs
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "MsgPackTxs":
		var result MsgPackTxs
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "TxObjects":
		var result txObjects
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid data_schema value: %q", getType.DataSchema)

}

// Validate validates this tx objects
func (m *txObjects) Validate(formats strfmt.Registry) error {
	return nil
}
