// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NameTransferTx name transfer tx
// swagger:model NameTransferTx
type NameTransferTx struct {

	// account
	Account EncodedHash `json:"account,omitempty"`

	// fee
	// Required: true
	Fee *int64 `json:"fee"`

	// name hash
	// Required: true
	NameHash *string `json:"name_hash"`

	// nonce
	Nonce int64 `json:"nonce,omitempty"`

	// recipient pubkey
	// Required: true
	RecipientPubkey *string `json:"recipient_pubkey"`

	// ttl
	TTL int64 `json:"ttl,omitempty"`
}

// Validate validates this name transfer tx
func (m *NameTransferTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipientPubkey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NameTransferTx) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if err := m.Account.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("account")
		}
		return err
	}

	return nil
}

func (m *NameTransferTx) validateFee(formats strfmt.Registry) error {

	if err := validate.Required("fee", "body", m.Fee); err != nil {
		return err
	}

	return nil
}

func (m *NameTransferTx) validateNameHash(formats strfmt.Registry) error {

	if err := validate.Required("name_hash", "body", m.NameHash); err != nil {
		return err
	}

	return nil
}

func (m *NameTransferTx) validateRecipientPubkey(formats strfmt.Registry) error {

	if err := validate.Required("recipient_pubkey", "body", m.RecipientPubkey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NameTransferTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NameTransferTx) UnmarshalBinary(b []byte) error {
	var res NameTransferTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
