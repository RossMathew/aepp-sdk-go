// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// JSONTx JSON tx
// swagger:discriminator JSONTx data_schema
type JSONTx interface {
	runtime.Validatable

	// data schema
	// Required: true
	DataSchema() string
	SetDataSchema(string)

	// vsn
	Vsn() int64
	SetVsn(int64)
}

type jsonTx struct {
	dataSchemaField string

	vsnField int64
}

// DataSchema gets the data schema of this polymorphic type
func (m *jsonTx) DataSchema() string {
	return "JSONTx"
}

// SetDataSchema sets the data schema of this polymorphic type
func (m *jsonTx) SetDataSchema(val string) {

}

// Vsn gets the vsn of this polymorphic type
func (m *jsonTx) Vsn() int64 {
	return m.vsnField
}

// SetVsn sets the vsn of this polymorphic type
func (m *jsonTx) SetVsn(val int64) {
	m.vsnField = val
}

// UnmarshalJSONTxSlice unmarshals polymorphic slices of JSONTx
func UnmarshalJSONTxSlice(reader io.Reader, consumer runtime.Consumer) ([]JSONTx, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []JSONTx
	for _, element := range elements {
		obj, err := unmarshalJSONTx(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalJSONTx unmarshals polymorphic JSONTx
func UnmarshalJSONTx(reader io.Reader, consumer runtime.Consumer) (JSONTx, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalJSONTx(data, consumer)
}

func unmarshalJSONTx(data []byte, consumer runtime.Consumer) (JSONTx, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the data_schema property.
	var getType struct {
		DataSchema string `json:"data_schema"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("data_schema", "body", getType.DataSchema); err != nil {
		return nil, err
	}

	// The value of data_schema is used to determine which type to create and unmarshal the data into
	switch getType.DataSchema {
	case "ChannelCloseMutualTxJSON":
		var result ChannelCloseMutualTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ChannelCloseSoloTxJSON":
		var result ChannelCloseSoloTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ChannelCreateTxJSON":
		var result ChannelCreateTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ChannelDepositTxJSON":
		var result ChannelDepositTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ChannelSettleTxJSON":
		var result ChannelSettleTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ChannelSlashTxJSON":
		var result ChannelSLASHTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ChannelWithdrawalTxJSON":
		var result ChannelWithdrawalTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ContractCallTxObject":
		var result ContractCallTxObject
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ContractCreateTxObject":
		var result ContractCreateTxObject
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "JSONTx":
		var result jsonTx
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "NameClaimTxObject":
		var result NameClaimTxObject
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "NamePreclaimTxObject":
		var result NamePreclaimTxObject
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "NameRevokeTxObject":
		var result NameRevokeTxObject
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "NameTransferTxObject":
		var result NameTransferTxObject
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "NameUpdateTxObject":
		var result NameUpdateTxObject
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "OracleExtendTxJSON":
		var result OracleExtendTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "OracleQueryTxJSON":
		var result OracleQueryTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "OracleRegisterTxJSON":
		var result OracleRegisterTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "OracleResponseTxJSON":
		var result OracleResponseTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "SpendTxJSON":
		var result SpendTxJSON
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid data_schema value: %q", getType.DataSchema)

}

// Validate validates this JSON tx
func (m *jsonTx) Validate(formats strfmt.Registry) error {
	return nil
}
