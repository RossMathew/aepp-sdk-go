// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContractObject contract object
// swagger:model ContractObject
type ContractObject struct {

	// active
	Active bool `json:"active,omitempty"`

	// deposit
	Deposit int64 `json:"deposit,omitempty"`

	// id
	ID EncodedHash `json:"id,omitempty"`

	// log
	Log string `json:"log,omitempty"`

	// owner
	Owner EncodedHash `json:"owner,omitempty"`

	// referers
	Referers []EncodedHash `json:"referers"`

	// vm version
	// Maximum: 255
	// Minimum: 0
	VMVersion *int64 `json:"vm_version,omitempty"`
}

// Validate validates this contract object
func (m *ContractObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContractObject) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *ContractObject) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if err := m.Owner.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("owner")
		}
		return err
	}

	return nil
}

func (m *ContractObject) validateReferers(formats strfmt.Registry) error {

	if swag.IsZero(m.Referers) { // not required
		return nil
	}

	for i := 0; i < len(m.Referers); i++ {

		if err := m.Referers[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("referers" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContractObject) validateVMVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.VMVersion) { // not required
		return nil
	}

	if err := validate.MinimumInt("vm_version", "body", int64(*m.VMVersion), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("vm_version", "body", int64(*m.VMVersion), 255, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContractObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContractObject) UnmarshalBinary(b []byte) error {
	var res ContractObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
