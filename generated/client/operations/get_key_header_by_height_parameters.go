// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetKeyHeaderByHeightParams creates a new GetKeyHeaderByHeightParams object
// with the default values initialized.
func NewGetKeyHeaderByHeightParams() *GetKeyHeaderByHeightParams {
	var ()
	return &GetKeyHeaderByHeightParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetKeyHeaderByHeightParamsWithTimeout creates a new GetKeyHeaderByHeightParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetKeyHeaderByHeightParamsWithTimeout(timeout time.Duration) *GetKeyHeaderByHeightParams {
	var ()
	return &GetKeyHeaderByHeightParams{

		timeout: timeout,
	}
}

// NewGetKeyHeaderByHeightParamsWithContext creates a new GetKeyHeaderByHeightParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetKeyHeaderByHeightParamsWithContext(ctx context.Context) *GetKeyHeaderByHeightParams {
	var ()
	return &GetKeyHeaderByHeightParams{

		Context: ctx,
	}
}

// NewGetKeyHeaderByHeightParamsWithHTTPClient creates a new GetKeyHeaderByHeightParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetKeyHeaderByHeightParamsWithHTTPClient(client *http.Client) *GetKeyHeaderByHeightParams {
	var ()
	return &GetKeyHeaderByHeightParams{
		HTTPClient: client,
	}
}

/*GetKeyHeaderByHeightParams contains all the parameters to send to the API endpoint
for the get key header by height operation typically these are written to a http.Request
*/
type GetKeyHeaderByHeightParams struct {

	/*Height
	  Height of the header to fetch

	*/
	Height int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get key header by height params
func (o *GetKeyHeaderByHeightParams) WithTimeout(timeout time.Duration) *GetKeyHeaderByHeightParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get key header by height params
func (o *GetKeyHeaderByHeightParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get key header by height params
func (o *GetKeyHeaderByHeightParams) WithContext(ctx context.Context) *GetKeyHeaderByHeightParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get key header by height params
func (o *GetKeyHeaderByHeightParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get key header by height params
func (o *GetKeyHeaderByHeightParams) WithHTTPClient(client *http.Client) *GetKeyHeaderByHeightParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get key header by height params
func (o *GetKeyHeaderByHeightParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHeight adds the height to the get key header by height params
func (o *GetKeyHeaderByHeightParams) WithHeight(height int64) *GetKeyHeaderByHeightParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the get key header by height params
func (o *GetKeyHeaderByHeightParams) SetHeight(height int64) {
	o.Height = height
}

// WriteToRequest writes these params to a swagger request
func (o *GetKeyHeaderByHeightParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param height
	qrHeight := o.Height
	qHeight := swag.FormatInt64(qrHeight)
	if qHeight != "" {
		if err := r.SetQueryParam("height", qHeight); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
