// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/aeternity/aepp-sdk-go/generated/models"
)

// GetNameReader is a Reader for the GetName structure.
type GetNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNameOK creates a GetNameOK with default headers values
func NewGetNameOK() *GetNameOK {
	return &GetNameOK{}
}

/*GetNameOK handles this case with default header values.

Name data
*/
type GetNameOK struct {
	Payload *models.NameEntry
}

func (o *GetNameOK) Error() string {
	return fmt.Sprintf("[GET /name][%d] getNameOK  %+v", 200, o.Payload)
}

func (o *GetNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NameEntry)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNameBadRequest creates a GetNameBadRequest with default headers values
func NewGetNameBadRequest() *GetNameBadRequest {
	return &GetNameBadRequest{}
}

/*GetNameBadRequest handles this case with default header values.

Name validation failed
*/
type GetNameBadRequest struct {
	Payload *models.Error
}

func (o *GetNameBadRequest) Error() string {
	return fmt.Sprintf("[GET /name][%d] getNameBadRequest  %+v", 400, o.Payload)
}

func (o *GetNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNameNotFound creates a GetNameNotFound with default headers values
func NewGetNameNotFound() *GetNameNotFound {
	return &GetNameNotFound{}
}

/*GetNameNotFound handles this case with default header values.

Name not found
*/
type GetNameNotFound struct {
	Payload *models.Error
}

func (o *GetNameNotFound) Error() string {
	return fmt.Sprintf("[GET /name][%d] getNameNotFound  %+v", 404, o.Payload)
}

func (o *GetNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
