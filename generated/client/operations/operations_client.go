// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CallContract Call a sophia function with a given name and argument in the given bytecode off chain.
*/
func (a *Client) CallContract(params *CallContractParams) (*CallContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallContract",
		Method:             "POST",
		PathPattern:        "/contract/call",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CallContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CallContractOK), nil

}

/*
CompileContract Compile a sophia contract from source and return byte code
*/
func (a *Client) CompileContract(params *CompileContractParams) (*CompileContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompileContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompileContract",
		Method:             "POST",
		PathPattern:        "/contract/compile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompileContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompileContractOK), nil

}

/*
DecodeData Decode Sophia return data encoded according to Sophia ABI.
*/
func (a *Client) DecodeData(params *DecodeDataParams) (*DecodeDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDecodeDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DecodeData",
		Method:             "POST",
		PathPattern:        "/contract/decode-data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DecodeDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DecodeDataOK), nil

}

/*
EncodeCalldata Encode sophia data and function name according to sophia ABI.
*/
func (a *Client) EncodeCalldata(params *EncodeCalldataParams) (*EncodeCalldataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEncodeCalldataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EncodeCalldata",
		Method:             "POST",
		PathPattern:        "/contract/encode-calldata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EncodeCalldataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EncodeCalldataOK), nil

}

/*
GetAccountBalance Get accounts's balance
*/
func (a *Client) GetAccountBalance(params *GetAccountBalanceParams) (*GetAccountBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountBalanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountBalance",
		Method:             "GET",
		PathPattern:        "/account/{address}/balance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountBalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountBalanceOK), nil

}

/*
GetAccountByPubkey Get an account by public key
*/
func (a *Client) GetAccountByPubkey(params *GetAccountByPubkeyParams) (*GetAccountByPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountByPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountByPubkey",
		Method:             "GET",
		PathPattern:        "/accounts/{pubkey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountByPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountByPubkeyOK), nil

}

/*
GetAccountNonce Get accounts's last used nonce on chain
*/
func (a *Client) GetAccountNonce(params *GetAccountNonceParams) (*GetAccountNonceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountNonceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountNonce",
		Method:             "GET",
		PathPattern:        "/account/{account_pubkey}/nonce",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountNonceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountNonceOK), nil

}

/*
GetAccountPendingTransactions Get accounts's pending transactions from the mempool
*/
func (a *Client) GetAccountPendingTransactions(params *GetAccountPendingTransactionsParams) (*GetAccountPendingTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountPendingTransactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountPendingTransactions",
		Method:             "GET",
		PathPattern:        "/account/{account_pubkey}/pending_transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountPendingTransactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountPendingTransactionsOK), nil

}

/*
GetAccountsBalances Get all users' balances
*/
func (a *Client) GetAccountsBalances(params *GetAccountsBalancesParams) (*GetAccountsBalancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsBalancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsBalances",
		Method:             "GET",
		PathPattern:        "/balances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountsBalancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountsBalancesOK), nil

}

/*
GetActiveRegisteredOracles Get active registered oracles
*/
func (a *Client) GetActiveRegisteredOracles(params *GetActiveRegisteredOraclesParams) (*GetActiveRegisteredOraclesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActiveRegisteredOraclesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetActiveRegisteredOracles",
		Method:             "GET",
		PathPattern:        "/oracles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActiveRegisteredOraclesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetActiveRegisteredOraclesOK), nil

}

/*
GetBlockByHash Get a block by hash
*/
func (a *Client) GetBlockByHash(params *GetBlockByHashParams) (*GetBlockByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBlockByHash",
		Method:             "GET",
		PathPattern:        "/block/hash/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBlockByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlockByHashOK), nil

}

/*
GetBlockGenesis Get the genesis block
*/
func (a *Client) GetBlockGenesis(params *GetBlockGenesisParams) (*GetBlockGenesisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockGenesisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBlockGenesis",
		Method:             "GET",
		PathPattern:        "/block/genesis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBlockGenesisReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlockGenesisOK), nil

}

/*
GetBlockLatest Get the top block
*/
func (a *Client) GetBlockLatest(params *GetBlockLatestParams) (*GetBlockLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockLatestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBlockLatest",
		Method:             "GET",
		PathPattern:        "/block/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBlockLatestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlockLatestOK), nil

}

/*
GetBlockNumber Get the current block's height
*/
func (a *Client) GetBlockNumber(params *GetBlockNumberParams) (*GetBlockNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBlockNumber",
		Method:             "GET",
		PathPattern:        "/block/number",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBlockNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlockNumberOK), nil

}

/*
GetBlockTxsCountByHash Get a block transactions count by hash
*/
func (a *Client) GetBlockTxsCountByHash(params *GetBlockTxsCountByHashParams) (*GetBlockTxsCountByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockTxsCountByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBlockTxsCountByHash",
		Method:             "GET",
		PathPattern:        "/block/txs/count/hash/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBlockTxsCountByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlockTxsCountByHashOK), nil

}

/*
GetBlockTxsCountByHeight Get a block transactions count by height
*/
func (a *Client) GetBlockTxsCountByHeight(params *GetBlockTxsCountByHeightParams) (*GetBlockTxsCountByHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockTxsCountByHeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBlockTxsCountByHeight",
		Method:             "GET",
		PathPattern:        "/block/txs/count/height/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBlockTxsCountByHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlockTxsCountByHeightOK), nil

}

/*
GetChannelByPubkey Get channel by public key
*/
func (a *Client) GetChannelByPubkey(params *GetChannelByPubkeyParams) (*GetChannelByPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChannelByPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetChannelByPubkey",
		Method:             "GET",
		PathPattern:        "/channels/{pubkey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChannelByPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChannelByPubkeyOK), nil

}

/*
GetCommitmentHash Compute commitment hash for a given salt and name. Commitment hash must be computed client side. This endpoint is for verifying client's implementations.
*/
func (a *Client) GetCommitmentHash(params *GetCommitmentHashParams) (*GetCommitmentHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommitmentHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCommitmentHash",
		Method:             "GET",
		PathPattern:        "/commitment-hash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCommitmentHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCommitmentHashOK), nil

}

/*
GetContract Get a contract by pubkey
*/
func (a *Client) GetContract(params *GetContractParams) (*GetContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContract",
		Method:             "GET",
		PathPattern:        "/contracts/{pubkey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractOK), nil

}

/*
GetContractCallFromTx Get the call result for a contract_create or contract_call transaction
*/
func (a *Client) GetContractCallFromTx(params *GetContractCallFromTxParams) (*GetContractCallFromTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractCallFromTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContractCallFromTx",
		Method:             "GET",
		PathPattern:        "/tx/{tx_hash}/contract-call",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContractCallFromTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractCallFromTxOK), nil

}

/*
GetContractCode Get contract code by pubkey
*/
func (a *Client) GetContractCode(params *GetContractCodeParams) (*GetContractCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContractCode",
		Method:             "GET",
		PathPattern:        "/contracts/{pubkey}/code",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContractCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractCodeOK), nil

}

/*
GetContractPoI Get a proof of inclusion for a contract
*/
func (a *Client) GetContractPoI(params *GetContractPoIParams) (*GetContractPoIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractPoIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContractPoI",
		Method:             "GET",
		PathPattern:        "/poi/contract/{contract}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContractPoIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractPoIOK), nil

}

/*
GetContractStore Get contract store by pubkey
*/
func (a *Client) GetContractStore(params *GetContractStoreParams) (*GetContractStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContractStore",
		Method:             "GET",
		PathPattern:        "/contracts/{pubkey}/store",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContractStoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractStoreOK), nil

}

/*
GetCurrentGeneration Get the current generation
*/
func (a *Client) GetCurrentGeneration(params *GetCurrentGenerationParams) (*GetCurrentGenerationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentGenerationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurrentGeneration",
		Method:             "GET",
		PathPattern:        "/generations/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentGenerationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentGenerationOK), nil

}

/*
GetCurrentKeyBlock Get the current key block
*/
func (a *Client) GetCurrentKeyBlock(params *GetCurrentKeyBlockParams) (*GetCurrentKeyBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentKeyBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurrentKeyBlock",
		Method:             "GET",
		PathPattern:        "/key-blocks/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentKeyBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentKeyBlockOK), nil

}

/*
GetCurrentKeyBlockHash Get the hash of the current key block
*/
func (a *Client) GetCurrentKeyBlockHash(params *GetCurrentKeyBlockHashParams) (*GetCurrentKeyBlockHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentKeyBlockHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurrentKeyBlockHash",
		Method:             "GET",
		PathPattern:        "/key-blocks/current/hash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentKeyBlockHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentKeyBlockHashOK), nil

}

/*
GetCurrentKeyBlockHeight Get the height of the current key block
*/
func (a *Client) GetCurrentKeyBlockHeight(params *GetCurrentKeyBlockHeightParams) (*GetCurrentKeyBlockHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentKeyBlockHeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurrentKeyBlockHeight",
		Method:             "GET",
		PathPattern:        "/key-blocks/current/height",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentKeyBlockHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentKeyBlockHeightOK), nil

}

/*
GetGenerationByHash Get a generation by hash
*/
func (a *Client) GetGenerationByHash(params *GetGenerationByHashParams) (*GetGenerationByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGenerationByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGenerationByHash",
		Method:             "GET",
		PathPattern:        "/generations/hash/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGenerationByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGenerationByHashOK), nil

}

/*
GetGenerationByHeight Get a generation by height
*/
func (a *Client) GetGenerationByHeight(params *GetGenerationByHeightParams) (*GetGenerationByHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGenerationByHeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGenerationByHeight",
		Method:             "GET",
		PathPattern:        "/generations/height/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGenerationByHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGenerationByHeightOK), nil

}

/*
GetGenesisBlockTxsCount Get the genesis block transactions count
*/
func (a *Client) GetGenesisBlockTxsCount(params *GetGenesisBlockTxsCountParams) (*GetGenesisBlockTxsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGenesisBlockTxsCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGenesisBlockTxsCount",
		Method:             "GET",
		PathPattern:        "/block/txs/count/genesis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGenesisBlockTxsCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGenesisBlockTxsCountOK), nil

}

/*
GetHeaderByHash Get a header by hash
*/
func (a *Client) GetHeaderByHash(params *GetHeaderByHashParams) (*GetHeaderByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHeaderByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHeaderByHash",
		Method:             "GET",
		PathPattern:        "/header-by-hash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHeaderByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHeaderByHashOK), nil

}

/*
GetInfo Get node info
*/
func (a *Client) GetInfo(params *GetInfoParams) (*GetInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInfo",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInfoOK), nil

}

/*
GetKeyBlockByHash Get a key block by hash
*/
func (a *Client) GetKeyBlockByHash(params *GetKeyBlockByHashParams) (*GetKeyBlockByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyBlockByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKeyBlockByHash",
		Method:             "GET",
		PathPattern:        "/key-blocks/hash/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyBlockByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyBlockByHashOK), nil

}

/*
GetKeyBlockByHeight Get a key block by height
*/
func (a *Client) GetKeyBlockByHeight(params *GetKeyBlockByHeightParams) (*GetKeyBlockByHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyBlockByHeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKeyBlockByHeight",
		Method:             "GET",
		PathPattern:        "/key-blocks/height/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyBlockByHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyBlockByHeightOK), nil

}

/*
GetKeyBlockByHeightObsolete Get a key block by height
*/
func (a *Client) GetKeyBlockByHeightObsolete(params *GetKeyBlockByHeightObsoleteParams) (*GetKeyBlockByHeightObsoleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyBlockByHeightObsoleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKeyBlockByHeightObsolete",
		Method:             "GET",
		PathPattern:        "/block/height/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyBlockByHeightObsoleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyBlockByHeightObsoleteOK), nil

}

/*
GetKeyHeaderByHeight Get a key header by its height in the chain
*/
func (a *Client) GetKeyHeaderByHeight(params *GetKeyHeaderByHeightParams) (*GetKeyHeaderByHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyHeaderByHeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKeyHeaderByHeight",
		Method:             "GET",
		PathPattern:        "/header-by-height",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyHeaderByHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyHeaderByHeightOK), nil

}

/*
GetLatestBlockTxsCount Get the latest block transactions count
*/
func (a *Client) GetLatestBlockTxsCount(params *GetLatestBlockTxsCountParams) (*GetLatestBlockTxsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestBlockTxsCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLatestBlockTxsCount",
		Method:             "GET",
		PathPattern:        "/block/txs/count/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLatestBlockTxsCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLatestBlockTxsCountOK), nil

}

/*
GetMicroBlockHeaderByHash Get a micro block header by hash
*/
func (a *Client) GetMicroBlockHeaderByHash(params *GetMicroBlockHeaderByHashParams) (*GetMicroBlockHeaderByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicroBlockHeaderByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMicroBlockHeaderByHash",
		Method:             "GET",
		PathPattern:        "/micro-blocks/hash/{hash}/header",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMicroBlockHeaderByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicroBlockHeaderByHashOK), nil

}

/*
GetMicroBlockTransactionByHashAndIndex Get a micro block transaction by hash and index
*/
func (a *Client) GetMicroBlockTransactionByHashAndIndex(params *GetMicroBlockTransactionByHashAndIndexParams) (*GetMicroBlockTransactionByHashAndIndexOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicroBlockTransactionByHashAndIndexParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMicroBlockTransactionByHashAndIndex",
		Method:             "GET",
		PathPattern:        "/micro-blocks/hash/{hash}/transactions/index/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMicroBlockTransactionByHashAndIndexReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicroBlockTransactionByHashAndIndexOK), nil

}

/*
GetMicroBlockTransactionsByHash Get micro block transactions by hash
*/
func (a *Client) GetMicroBlockTransactionsByHash(params *GetMicroBlockTransactionsByHashParams) (*GetMicroBlockTransactionsByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicroBlockTransactionsByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMicroBlockTransactionsByHash",
		Method:             "GET",
		PathPattern:        "/micro-blocks/hash/{hash}/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMicroBlockTransactionsByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicroBlockTransactionsByHashOK), nil

}

/*
GetMicroBlockTransactionsCountByHash Get micro block transaction count by hash
*/
func (a *Client) GetMicroBlockTransactionsCountByHash(params *GetMicroBlockTransactionsCountByHashParams) (*GetMicroBlockTransactionsCountByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicroBlockTransactionsCountByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMicroBlockTransactionsCountByHash",
		Method:             "GET",
		PathPattern:        "/micro-blocks/hash/{hash}/transactions/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMicroBlockTransactionsCountByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicroBlockTransactionsCountByHashOK), nil

}

/*
GetName Get name entry from Naming System
*/
func (a *Client) GetName(params *GetNameParams) (*GetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetName",
		Method:             "GET",
		PathPattern:        "/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNameOK), nil

}

/*
GetNameEntryByName Get name entry from naming system
*/
func (a *Client) GetNameEntryByName(params *GetNameEntryByNameParams) (*GetNameEntryByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNameEntryByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNameEntryByName",
		Method:             "GET",
		PathPattern:        "/names/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNameEntryByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNameEntryByNameOK), nil

}

/*
GetOracleByPubkey Get an oracle by public key
*/
func (a *Client) GetOracleByPubkey(params *GetOracleByPubkeyParams) (*GetOracleByPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOracleByPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOracleByPubkey",
		Method:             "GET",
		PathPattern:        "/oracles/{pubkey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOracleByPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOracleByPubkeyOK), nil

}

/*
GetOracleQueriesByPubkey Get oracle queries by public key
*/
func (a *Client) GetOracleQueriesByPubkey(params *GetOracleQueriesByPubkeyParams) (*GetOracleQueriesByPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOracleQueriesByPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOracleQueriesByPubkey",
		Method:             "GET",
		PathPattern:        "/oracles/{pubkey}/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOracleQueriesByPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOracleQueriesByPubkeyOK), nil

}

/*
GetOracleQueryByPubkeyAndQueryID Get an oracle query by public key and query ID
*/
func (a *Client) GetOracleQueryByPubkeyAndQueryID(params *GetOracleQueryByPubkeyAndQueryIDParams) (*GetOracleQueryByPubkeyAndQueryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOracleQueryByPubkeyAndQueryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOracleQueryByPubkeyAndQueryId",
		Method:             "GET",
		PathPattern:        "/oracles/{pubkey}/queries/{query-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOracleQueryByPubkeyAndQueryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOracleQueryByPubkeyAndQueryIDOK), nil

}

/*
GetOracleQuestions Get active oracle questions
*/
func (a *Client) GetOracleQuestions(params *GetOracleQuestionsParams) (*GetOracleQuestionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOracleQuestionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOracleQuestions",
		Method:             "GET",
		PathPattern:        "/oracle-questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOracleQuestionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOracleQuestionsOK), nil

}

/*
GetPeerKey Get node's public peer key
*/
func (a *Client) GetPeerKey(params *GetPeerKeyParams) (*GetPeerKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeerKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeerKey",
		Method:             "GET",
		PathPattern:        "/peer/key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeerKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeerKeyOK), nil

}

/*
GetPeerPubkey Get peer public key
*/
func (a *Client) GetPeerPubkey(params *GetPeerPubkeyParams) (*GetPeerPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeerPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeerPubkey",
		Method:             "GET",
		PathPattern:        "/peers/pubkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeerPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeerPubkeyOK), nil

}

/*
GetPeers Get node Peers
*/
func (a *Client) GetPeers(params *GetPeersParams) (*GetPeersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeers",
		Method:             "GET",
		PathPattern:        "/debug/peers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeersOK), nil

}

/*
GetPendingAccountTransactionsByPubkey Get pending account transactions by public key
*/
func (a *Client) GetPendingAccountTransactionsByPubkey(params *GetPendingAccountTransactionsByPubkeyParams) (*GetPendingAccountTransactionsByPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingAccountTransactionsByPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPendingAccountTransactionsByPubkey",
		Method:             "GET",
		PathPattern:        "/accounts/{pubkey}/transactions/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingAccountTransactionsByPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingAccountTransactionsByPubkeyOK), nil

}

/*
GetPendingBlockTxsCount Get the pending block transactions count
*/
func (a *Client) GetPendingBlockTxsCount(params *GetPendingBlockTxsCountParams) (*GetPendingBlockTxsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingBlockTxsCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPendingBlockTxsCount",
		Method:             "GET",
		PathPattern:        "/block/txs/count/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingBlockTxsCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingBlockTxsCountOK), nil

}

/*
GetPendingKeyBlock Get the pending key block
*/
func (a *Client) GetPendingKeyBlock(params *GetPendingKeyBlockParams) (*GetPendingKeyBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingKeyBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPendingKeyBlock",
		Method:             "GET",
		PathPattern:        "/key-blocks/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingKeyBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingKeyBlockOK), nil

}

/*
GetPubKey Get user's public key address
*/
func (a *Client) GetPubKey(params *GetPubKeyParams) (*GetPubKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPubKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPubKey",
		Method:             "GET",
		PathPattern:        "/account/pub-key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPubKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPubKeyOK), nil

}

/*
GetStatus Get the status of a node
*/
func (a *Client) GetStatus(params *GetStatusParams) (*GetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStatus",
		Method:             "GET",
		PathPattern:        "/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStatusOK), nil

}

/*
GetTop Get the top block (either key or micro block)
*/
func (a *Client) GetTop(params *GetTopParams) (*GetTopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTop",
		Method:             "GET",
		PathPattern:        "/top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTopOK), nil

}

/*
GetTopBlock Get the top block (either key or micro block)
*/
func (a *Client) GetTopBlock(params *GetTopBlockParams) (*GetTopBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTopBlock",
		Method:             "GET",
		PathPattern:        "/blocks/top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTopBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTopBlockOK), nil

}

/*
GetTransactionByHash Get a transaction by hash
*/
func (a *Client) GetTransactionByHash(params *GetTransactionByHashParams) (*GetTransactionByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTransactionByHash",
		Method:             "GET",
		PathPattern:        "/transactions/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTransactionByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTransactionByHashOK), nil

}

/*
GetTransactionFromBlockHash Get a transaction by index in the block by hash
*/
func (a *Client) GetTransactionFromBlockHash(params *GetTransactionFromBlockHashParams) (*GetTransactionFromBlockHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionFromBlockHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTransactionFromBlockHash",
		Method:             "GET",
		PathPattern:        "/block/tx/hash/{hash}/{tx_index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTransactionFromBlockHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTransactionFromBlockHashOK), nil

}

/*
GetTransactionFromBlockHeight Get a transaction by index in the block by height
*/
func (a *Client) GetTransactionFromBlockHeight(params *GetTransactionFromBlockHeightParams) (*GetTransactionFromBlockHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionFromBlockHeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTransactionFromBlockHeight",
		Method:             "GET",
		PathPattern:        "/block/tx/height/{height}/{tx_index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTransactionFromBlockHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTransactionFromBlockHeightOK), nil

}

/*
GetTransactionFromBlockLatest Get a transaction by index in the latest block
*/
func (a *Client) GetTransactionFromBlockLatest(params *GetTransactionFromBlockLatestParams) (*GetTransactionFromBlockLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionFromBlockLatestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTransactionFromBlockLatest",
		Method:             "GET",
		PathPattern:        "/block/tx/latest/{tx_index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTransactionFromBlockLatestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTransactionFromBlockLatestOK), nil

}

/*
GetTransactionInfoByHash Get a transaction info by hash
*/
func (a *Client) GetTransactionInfoByHash(params *GetTransactionInfoByHashParams) (*GetTransactionInfoByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionInfoByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTransactionInfoByHash",
		Method:             "GET",
		PathPattern:        "/transactions/{hash}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTransactionInfoByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTransactionInfoByHashOK), nil

}

/*
GetTx Get a transaction by hash
*/
func (a *Client) GetTx(params *GetTxParams) (*GetTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTx",
		Method:             "GET",
		PathPattern:        "/tx/{tx_hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTxOK), nil

}

/*
GetTxs Get transactions in the mempool
*/
func (a *Client) GetTxs(params *GetTxsParams) (*GetTxsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTxsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTxs",
		Method:             "GET",
		PathPattern:        "/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTxsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTxsOK), nil

}

/*
GetVersion Get node's version
*/
func (a *Client) GetVersion(params *GetVersionParams) (*GetVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVersion",
		Method:             "GET",
		PathPattern:        "/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVersionOK), nil

}

/*
PostChannelCloseMutual Get a channel_close_mutual transaction object
*/
func (a *Client) PostChannelCloseMutual(params *PostChannelCloseMutualParams) (*PostChannelCloseMutualOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelCloseMutualParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelCloseMutual",
		Method:             "POST",
		PathPattern:        "/tx/channel/close/mutual",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelCloseMutualReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelCloseMutualOK), nil

}

/*
PostChannelCloseSolo Get a channel_close_solo transaction object
*/
func (a *Client) PostChannelCloseSolo(params *PostChannelCloseSoloParams) (*PostChannelCloseSoloOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelCloseSoloParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelCloseSolo",
		Method:             "POST",
		PathPattern:        "/tx/channel/close/solo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelCloseSoloReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelCloseSoloOK), nil

}

/*
PostChannelCreate Get a channel_create transaction object
*/
func (a *Client) PostChannelCreate(params *PostChannelCreateParams) (*PostChannelCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelCreate",
		Method:             "POST",
		PathPattern:        "/tx/channel/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelCreateOK), nil

}

/*
PostChannelDeposit Get a channel_deposit transaction object
*/
func (a *Client) PostChannelDeposit(params *PostChannelDepositParams) (*PostChannelDepositOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelDepositParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelDeposit",
		Method:             "POST",
		PathPattern:        "/tx/channel/deposit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelDepositReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelDepositOK), nil

}

/*
PostChannelSettle Get a channel_settle transaction object
*/
func (a *Client) PostChannelSettle(params *PostChannelSettleParams) (*PostChannelSettleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelSettleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelSettle",
		Method:             "POST",
		PathPattern:        "/tx/channel/settle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelSettleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelSettleOK), nil

}

/*
PostChannelSLASH Get a channel_slash transaction object
*/
func (a *Client) PostChannelSLASH(params *PostChannelSLASHParams) (*PostChannelSLASHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelSLASHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelSlash",
		Method:             "POST",
		PathPattern:        "/tx/channel/slash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelSLASHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelSLASHOK), nil

}

/*
PostChannelSnapshotSolo Get a channel_snapshot_solo transaction object
*/
func (a *Client) PostChannelSnapshotSolo(params *PostChannelSnapshotSoloParams) (*PostChannelSnapshotSoloOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelSnapshotSoloParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelSnapshotSolo",
		Method:             "POST",
		PathPattern:        "/tx/channel/snapshot/solo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelSnapshotSoloReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelSnapshotSoloOK), nil

}

/*
PostChannelWithdrawal Get a channel_withdrawal transaction object
*/
func (a *Client) PostChannelWithdrawal(params *PostChannelWithdrawalParams) (*PostChannelWithdrawalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelWithdrawalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelWithdrawal",
		Method:             "POST",
		PathPattern:        "/tx/channel/withdrawal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelWithdrawalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelWithdrawalOK), nil

}

/*
PostContractCall Get a contract_call transaction object
*/
func (a *Client) PostContractCall(params *PostContractCallParams) (*PostContractCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContractCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContractCall",
		Method:             "POST",
		PathPattern:        "/tx/contract/call",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostContractCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContractCallOK), nil

}

/*
PostContractCallCompute Compute the call_data for SOPHIA and get contract_call transaction object
*/
func (a *Client) PostContractCallCompute(params *PostContractCallComputeParams) (*PostContractCallComputeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContractCallComputeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContractCallCompute",
		Method:             "POST",
		PathPattern:        "/tx/contract/call/compute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostContractCallComputeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContractCallComputeOK), nil

}

/*
PostContractCreate Get a contract_create transaction object
*/
func (a *Client) PostContractCreate(params *PostContractCreateParams) (*PostContractCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContractCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContractCreate",
		Method:             "POST",
		PathPattern:        "/tx/contract/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostContractCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContractCreateOK), nil

}

/*
PostNameClaim Get a name_claim transaction object
*/
func (a *Client) PostNameClaim(params *PostNameClaimParams) (*PostNameClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameClaim",
		Method:             "POST",
		PathPattern:        "/tx/name/claim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameClaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameClaimOK), nil

}

/*
PostNameClaimTx Create name claim transaction
*/
func (a *Client) PostNameClaimTx(params *PostNameClaimTxParams) (*PostNameClaimTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameClaimTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameClaimTx",
		Method:             "POST",
		PathPattern:        "/name-claim-tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameClaimTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameClaimTxOK), nil

}

/*
PostNamePreclaim Get a name_preclaim transaction object
*/
func (a *Client) PostNamePreclaim(params *PostNamePreclaimParams) (*PostNamePreclaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNamePreclaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNamePreclaim",
		Method:             "POST",
		PathPattern:        "/tx/name/preclaim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNamePreclaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNamePreclaimOK), nil

}

/*
PostNamePreclaimTx Create name preclaim transaction
*/
func (a *Client) PostNamePreclaimTx(params *PostNamePreclaimTxParams) (*PostNamePreclaimTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNamePreclaimTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNamePreclaimTx",
		Method:             "POST",
		PathPattern:        "/name-preclaim-tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNamePreclaimTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNamePreclaimTxOK), nil

}

/*
PostNameRevoke Get a name_revoke transaction object
*/
func (a *Client) PostNameRevoke(params *PostNameRevokeParams) (*PostNameRevokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameRevokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameRevoke",
		Method:             "POST",
		PathPattern:        "/tx/name/revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameRevokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameRevokeOK), nil

}

/*
PostNameRevokeTx Create name revoke transaction
*/
func (a *Client) PostNameRevokeTx(params *PostNameRevokeTxParams) (*PostNameRevokeTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameRevokeTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameRevokeTx",
		Method:             "POST",
		PathPattern:        "/name-revoke-tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameRevokeTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameRevokeTxOK), nil

}

/*
PostNameTransfer Get a name_transfer transaction object
*/
func (a *Client) PostNameTransfer(params *PostNameTransferParams) (*PostNameTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameTransferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameTransfer",
		Method:             "POST",
		PathPattern:        "/tx/name/transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameTransferOK), nil

}

/*
PostNameTransferTx Create name transfer transaction
*/
func (a *Client) PostNameTransferTx(params *PostNameTransferTxParams) (*PostNameTransferTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameTransferTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameTransferTx",
		Method:             "POST",
		PathPattern:        "/name-transfer-tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameTransferTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameTransferTxOK), nil

}

/*
PostNameUpdate Get a name_update transaction object
*/
func (a *Client) PostNameUpdate(params *PostNameUpdateParams) (*PostNameUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameUpdate",
		Method:             "POST",
		PathPattern:        "/tx/name/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameUpdateOK), nil

}

/*
PostNameUpdateTx Create name update transaction
*/
func (a *Client) PostNameUpdateTx(params *PostNameUpdateTxParams) (*PostNameUpdateTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameUpdateTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameUpdateTx",
		Method:             "POST",
		PathPattern:        "/name-update-tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameUpdateTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameUpdateTxOK), nil

}

/*
PostOracleExtend Get an oracle_extend transaction object
*/
func (a *Client) PostOracleExtend(params *PostOracleExtendParams) (*PostOracleExtendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleExtendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleExtend",
		Method:             "POST",
		PathPattern:        "/tx/oracle/extend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleExtendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleExtendOK), nil

}

/*
PostOracleExtendTx Create oracle extend transaction
*/
func (a *Client) PostOracleExtendTx(params *PostOracleExtendTxParams) (*PostOracleExtendTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleExtendTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleExtendTx",
		Method:             "POST",
		PathPattern:        "/oracle-extend-tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleExtendTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleExtendTxOK), nil

}

/*
PostOracleQuery Get an oracle_query transaction object
*/
func (a *Client) PostOracleQuery(params *PostOracleQueryParams) (*PostOracleQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleQuery",
		Method:             "POST",
		PathPattern:        "/tx/oracle/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleQueryOK), nil

}

/*
PostOracleQueryTx Create oracle query transaction
*/
func (a *Client) PostOracleQueryTx(params *PostOracleQueryTxParams) (*PostOracleQueryTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleQueryTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleQueryTx",
		Method:             "POST",
		PathPattern:        "/oracle-query-tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleQueryTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleQueryTxOK), nil

}

/*
PostOracleRegister Get a oracle_register transaction object
*/
func (a *Client) PostOracleRegister(params *PostOracleRegisterParams) (*PostOracleRegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleRegister",
		Method:             "POST",
		PathPattern:        "/tx/oracle/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleRegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleRegisterOK), nil

}

/*
PostOracleRegisterTx Create oracle register transaction
*/
func (a *Client) PostOracleRegisterTx(params *PostOracleRegisterTxParams) (*PostOracleRegisterTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleRegisterTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleRegisterTx",
		Method:             "POST",
		PathPattern:        "/oracle-register-tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleRegisterTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleRegisterTxOK), nil

}

/*
PostOracleResponse Get an oracle_response transaction object
*/
func (a *Client) PostOracleResponse(params *PostOracleResponseParams) (*PostOracleResponseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleResponseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleResponse",
		Method:             "POST",
		PathPattern:        "/tx/oracle/response",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleResponseOK), nil

}

/*
PostOracleResponseTx Create oracle response transaction
*/
func (a *Client) PostOracleResponseTx(params *PostOracleResponseTxParams) (*PostOracleResponseTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleResponseTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleResponseTx",
		Method:             "POST",
		PathPattern:        "/oracle-response-tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleResponseTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleResponseTxOK), nil

}

/*
PostSpend Get a spend transaction object
*/
func (a *Client) PostSpend(params *PostSpendParams) (*PostSpendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSpendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSpend",
		Method:             "POST",
		PathPattern:        "/tx/spend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSpendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSpendOK), nil

}

/*
PostSpendTx Create spend transaction
*/
func (a *Client) PostSpendTx(params *PostSpendTxParams) (*PostSpendTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSpendTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSpendTx",
		Method:             "POST",
		PathPattern:        "/spend-tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSpendTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSpendTxOK), nil

}

/*
PostTransaction Post a new transaction
*/
func (a *Client) PostTransaction(params *PostTransactionParams) (*PostTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTransaction",
		Method:             "POST",
		PathPattern:        "/ng-transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTransactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTransactionOK), nil

}

/*
PostTx Post a new transaction
*/
func (a *Client) PostTx(params *PostTxParams) (*PostTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTx",
		Method:             "POST",
		PathPattern:        "/tx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTxOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
