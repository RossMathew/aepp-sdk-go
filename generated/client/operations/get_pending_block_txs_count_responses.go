// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/aeternity/aepp-sdk-go/generated/models"
)

// GetPendingBlockTxsCountReader is a Reader for the GetPendingBlockTxsCount structure.
type GetPendingBlockTxsCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPendingBlockTxsCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPendingBlockTxsCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetPendingBlockTxsCountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPendingBlockTxsCountOK creates a GetPendingBlockTxsCountOK with default headers values
func NewGetPendingBlockTxsCountOK() *GetPendingBlockTxsCountOK {
	return &GetPendingBlockTxsCountOK{}
}

/*GetPendingBlockTxsCountOK handles this case with default header values.

The count of transactions in the pending block
*/
type GetPendingBlockTxsCountOK struct {
	Payload *models.InlineResponse2003
}

func (o *GetPendingBlockTxsCountOK) Error() string {
	return fmt.Sprintf("[GET /block/txs/count/pending][%d] getPendingBlockTxsCountOK  %+v", 200, o.Payload)
}

func (o *GetPendingBlockTxsCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InlineResponse2003)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPendingBlockTxsCountNotFound creates a GetPendingBlockTxsCountNotFound with default headers values
func NewGetPendingBlockTxsCountNotFound() *GetPendingBlockTxsCountNotFound {
	return &GetPendingBlockTxsCountNotFound{}
}

/*GetPendingBlockTxsCountNotFound handles this case with default header values.

Pending block not found
*/
type GetPendingBlockTxsCountNotFound struct {
	Payload *models.Error
}

func (o *GetPendingBlockTxsCountNotFound) Error() string {
	return fmt.Sprintf("[GET /block/txs/count/pending][%d] getPendingBlockTxsCountNotFound  %+v", 404, o.Payload)
}

func (o *GetPendingBlockTxsCountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
